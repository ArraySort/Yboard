plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'arraysort.project'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Oracle DB
    runtimeOnly 'com.oracle.database.jdbc:ojdbc11'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // H2 데이터베이스 (테스트 환경에서 사용)
    testImplementation 'com.h2database:h2'

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Dev tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // P6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'

    // Querydsl
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-taglibs'

    // JSP
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // Oauth2
    // implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

// active profile 설정 : 환경에 따른 디렉터리 선택 (dev, prod) -> 환경변수 지정 필요
ext.profile = (!project.hasProperty('profile') || !profile) ? 'dev' : profile

// active profile 지정 : 환경에 따른 디렉터리 지정 (dev, prod)
sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/resources-${profile}"
        }
    }
}

// [resources] 리소스 중복 허용
tasks {
    processResources {
        filesMatching('**/application.yaml') {
            expand(project.properties)
        }
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

test {
    useJUnitPlatform()
    // yml 설정 암호화 : Jasypt
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password")
    systemProperty "spring.profiles.active", 'test'
}
